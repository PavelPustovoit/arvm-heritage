[DATA].reduce((buffer, data) => {
  const state = data.state;
  const helper = data.helper;
  const dataTypes = data.dataTypes;

  const tableState = state.tableState;
  const canvasState = state.canvasState;

  const convertTypeMap = {
    int: 'Integer',
    long: 'Long',
    float: 'Float',
    double: 'Double',
    decimal: 'BigDecimal',
    boolean: 'Boolean',
    string: 'String',
    lob: 'String',
    date: 'LocalDate',
    dateTime: 'LocalDateTime',
    time: 'LocalTime',
  };

  const getType = name => {
    const dataType = dataTypes.find(dataType => name.toLowerCase().indexOf(dataType.name.toLowerCase()) === 0);
    return dataType ? dataType.type : 'string';
  };

  const getNameCase = (name, nameCase) => {
    let changeName = name;
    switch (nameCase) {
      case 'camelCase':
        changeName = helper.camelCase(name);
        break;
      case 'pascalCase':
        changeName = helper.pascalCase(name);
        break;
      case 'snakeCase':
        changeName = helper.snakeCase(name);
        break;
    }
    return changeName;
  };

  const orderByNameASC = tables =>
    tables.sort((a, b) => {
      const nameA = a.name.toLowerCase();
      const nameB = b.name.toLowerCase();
      if (nameA < nameB) {
        return -1;
      } else if (nameA > nameB) {
        return 1;
      }
      return 0;
    });

  function formatTable(table) {
    const tableName = getNameCase(table.name, canvasState.tableCase);
    if (table.comment.trim() !== '') {
      buffer.push(`// ${table.comment}`);
    }
    buffer.push(`@Data`);
    buffer.push(`public class ${tableName} {`);
    table.columns.forEach(column => {
      formatColumn(column,1);
    });
    buffer.push(`  public ${tableName}(`);
    table.columns.forEach(column => {
      formatColumn(column,0);
    });
    buffer.push(`                              ){`);
    table.columns.forEach(column => {
      formatColumn(column,2);
    });
    buffer.push(`  }`);
    buffer.push(`}`);
  }

  function formatColumn(column, t) {
    const columnName = getNameCase(column.name, canvasState.columnCase);
    const typeName = getType(column.dataType);
    if (column.comment.trim() !== '') {
      buffer.push(`  // ${column.comment}`);
    }
    if(t==1)
    buffer.push(`  private ${convertTypeMap[typeName]} ${columnName};`);
    else if(t==2)
    buffer.push(`       this.${columnName} = ${columnName};`);
    else
    buffer.push(`              ${convertTypeMap[typeName]} ${columnName};`);
  }

  orderByNameASC(tableState.tables);

  tableState.tables.forEach(table => {
    formatTable(table);
    buffer.push('');
  });

  return buffer;
}, []).join('\n');